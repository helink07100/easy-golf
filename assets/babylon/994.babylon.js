"use strict";(self.webpackChunkBABYLON=self.webpackChunkBABYLON||[]).push([[994],{994:(e,a,i)=>{i.r(a),i.d(a,{_DDSTextureLoader:()=>p});var t=i(7517),s=i(6464);class p{constructor(){this.supportCascades=!0}loadCubeData(e,a,i,p){const n=a.getEngine();let o,r=!1,u=1e3;if(Array.isArray(e))for(let i=0;i<e.length;i++){const t=e[i];o=s.D.GetDDSInfo(t),a.width=o.width,a.height=o.height,r=(o.isRGB||o.isLuminance||o.mipmapCount>1)&&a.generateMipMaps,n._unpackFlipY(o.isCompressed),s.D.UploadDDSLevels(n,a,t,o,r,6,-1,i),o.isFourCC||1!==o.mipmapCount?u=o.mipmapCount-1:n.generateMipMapsForCubemap(a)}else{const p=e;o=s.D.GetDDSInfo(p),a.width=o.width,a.height=o.height,i&&(o.sphericalPolynomial=new t.Q),r=(o.isRGB||o.isLuminance||o.mipmapCount>1)&&a.generateMipMaps,n._unpackFlipY(o.isCompressed),s.D.UploadDDSLevels(n,a,p,o,r,6),o.isFourCC||1!==o.mipmapCount?u=o.mipmapCount-1:n.generateMipMapsForCubemap(a,!1)}n._setCubeMapTextureParams(a,r,u),a.isReady=!0,a.onLoadedObservable.notifyObservers(a),a.onLoadedObservable.clear(),p&&p({isDDS:!0,width:a.width,info:o,data:e,texture:a})}loadData(e,a,i){const t=s.D.GetDDSInfo(e),p=(t.isRGB||t.isLuminance||t.mipmapCount>1)&&a.generateMipMaps&&Math.max(t.width,t.height)>>t.mipmapCount-1==1;i(t.width,t.height,p,t.isFourCC,(()=>{s.D.UploadDDSLevels(a.getEngine(),a,e,t,p,1)}))}}}}]);